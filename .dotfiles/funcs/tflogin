#!/usr/local/bin/zsh

function tflogin() {
  PROJECT=$argv[1]

  printf "Selected project: \e[1;33m$PROJECT\e[0m\n"
  read "START_SCRIPT?Do ye wish to prepare Terraform for the project above? [y/N] "
  if [[ "$START_SCRIPT" =~ ^[Yy]$ ]]
  then
    if [[ $(pwd | awk -F / '{print $NF}') == "cloud-setup" ]]
    then
      printf "\n\e[1;34mtflogin: \e[0msetting project specific environment variables.. \n"
      echo "setting gcloud config to $PROJECT for GCP Secret Manager cli.."
      gcloud config set project $PROJECT
      echo "exporting GCLOUD_PROJECT.."
      GCLOUD_PROJECT=$PROJECT
      echo "exporting GOOGLE_CREDENTIALS.."
      GOOGLE_CREDENTIALS=$(gcloud secrets versions access latest --secret="cloud-sa-terraform-admin")
      echo "exporting TERRAFORM_STATE_GCP_BUCKET.."
      TERRAFORM_STATE_GCP_BUCKET=$PROJECT-tf-state
      printf "\e[1;34mtflogin: \e[0mproject specific environment variables set! \n"

      printf "\n\e[1;34mtflogin: \e[0msetting the shared secrets between env.. \n"
      echo "exporting app_alertmanager_opsgenie_api_key.."
      TF_VAR_app_alertmanager_opsgenie_api_key=$(gcloud secrets versions access latest --secret="cloud-terraform-api-key-opsgenie")
      echo "exporting app_alertmanager_slack_url.."
      TF_VAR_app_alertmanager_slack_url=$(gcloud secrets versions access latest --secret="cloud-terraform-api-key-slack")
      echo "exporting snyk_token_docker_credentials"
      TF_VAR_snyk_token_docker_credentials=$(gcloud secrets versions access latest --secret="cloud-sa-snyk-docker-credentials")
      echo "exporting snyk_token_integrationId"
      TF_VAR_snyk_token_integrationId=$(gcloud secrets versions access latest --secret="cloud-terraform-api-key-snyk")
      printf "\e[1;34mtflogin: \e[0mshared secrets set! \n"

      printf "\n\e[1;34mtflogin: \e[0msetting environment spesific variables.. \n"
      if [[ $PROJECT == *"prod"* ]]; then
        echo "changing the k8s context to $PROJECT.."
        kset $PROJECT
        echo "setting the generic ENVIRONMENT variable.."
        ENVIRONMENT=prod
        echo "setting the terraform environment variable.."
        TERRAFORM_ENVIRONMENT=prod
        echo "setting the GOOGLE_ENCRYPTION_KEY for $PROJECT.."
        GOOGLE_ENCRYPTION_KEY=$(gcloud secrets versions access latest --secret="cloud-terraform-bucket-encryption-key")
        echo "changing the terraform workspace to prod.."
        tf workspace select prod
      elif [[ $PROJECT == *"test"* ]]; then
        echo "changing the k8s context to $PROJECT.."
        kset $PROJECT
        echo "setting the generic ENVIRONMENT variable.."
        ENVIRONMENT=test
        echo "setting the terraform environment variable.."
        TERRAFORM_ENVIRONMENT=test
        echo "setting the GOOGLE_ENCRYPTION_KEY for $PROJECT.."
        GOOGLE_ENCRYPTION_KEY=""
        echo "changing the terraform workspace to test.."
        tf workspace select test
      elif [[ $PROJECT == *"shared"* ]]; then
        echo "setting the generic ENVIRONMENT variable.."
        ENVIRONMENT=shared
        echo "setting the terraform environment variable.."
        TERRAFORM_ENVIRONMENT=shared
        echo "setting the GOOGLE_ENCRYPTION_KEY for $PROJECT.."
        GOOGLE_ENCRYPTION_KEY=""
        echo "changing the terraform workspace to test.."
        tf workspace select shared
      fi

      echo ""
      read "INIT_REPLY?Do ye wish to run init? [y/N] "
      if [[ "$INIT_REPLY" =~ ^[Yy]$ ]]
      then
        tf init -reconfigure -backend-config="bucket=$TERRAFORM_STATE_GCP_BUCKET" -lock=false
      fi

      read "REFRESH_REPLY?Do ye wish to run refresh? [y/N] "
      if [[ "$REFRESH_REPLY" =~ ^[Yy]$ ]]
      then
        tf refresh -parallelism=25 $(for filename in env/$ENVIRONMENT/*.tfvars; do printf "%s=%s" "$filename" ; done)
      fi

      printf "%b" "\nTerraform environment is ready for: \e[1;32m$PROJECT\e[0m\n"

      echo ""
      echo "  (\.   \      ,/)"
      echo "   \(   |\     )/    Yer done!"
      echo "   //\  | \   /\\"
      echo "  (/ /\_#oo#_/\ \)   Happy Terraforming!"
      echo "   \/\  ####  /\/"
      echo "        '##'"
      echo ""
    else
      printf "\nScript failed: \e[1;31mYou need to be in the cloud-setup folder for this script to work! ðŸ™Š\e[0m\n"
      printf "Current directory: $(pwd)\n"
    fi
  else
    printf "\e[1;32mTask failed successfully: \e[0mUser aborted the script~ \n"
  fi
}